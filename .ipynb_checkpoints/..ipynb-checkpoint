{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c826260",
   "metadata": {},
   "outputs": [],
   "source": [
    "import awkward as ak\n",
    "import uproot\n",
    "import hist\n",
    "import jax\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06dad163",
   "metadata": {},
   "outputs": [],
   "source": [
    "jax.config.update(\"jax_platform_name\", \"cpu\")\n",
    "jax.config.update(\"jax_enable_x64\", True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "436018db",
   "metadata": {},
   "outputs": [],
   "source": [
    "events = uproot.open(\"data/HiggsZZ4mu.root:Events\")\n",
    "events.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89cff41e",
   "metadata": {},
   "outputs": [],
   "source": [
    "muons = events.arrays(\n",
    "    [\"pt\", \"eta\", \"phi\", \"charge\"],\n",
    "    aliases={\"pt\": \"Muon_pt\", \"eta\": \"Muon_eta\", \"phi\": \"Muon_phi\", \"charge\": \"Muon_charge\"},\n",
    "    array_cache=None,\n",
    ")\n",
    "muons = ak._v2.tmp_for_testing.v1_to_v2(muons.layout)\n",
    "muons = ak._v2.values_astype(ak._v2.Array(muons, backend=\"jax\"), np.float64)\n",
    "tan = ak._v2.ones_like(muons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ea60e60",
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(muons):\n",
    "    cut = (ak._v2.num(muons.charge) >= 2) & (ak._v2.sum(muons.charge[:, :2], axis=1) == 0)\n",
    "    mu1, mu2 = muons[cut][:, 0], muons[cut][:, 1]\n",
    "    return np.sqrt(2*mu1.pt*mu2.pt*(np.cosh(mu1.eta - mu2.eta) - np.cos(mu1.phi - mu2.phi)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4a31a5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "h = hist.Hist.new.Reg(120, 0, 120, name=\"mass\").Double()\n",
    "h1 = hist.Hist.new.Reg(120, 0, 120, name=\"derivative(f)\").Double()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5287a97",
   "metadata": {},
   "outputs": [],
   "source": [
    "vjp_val, vjp_func = jax.vjp(f, muons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a81b2f71",
   "metadata": {},
   "outputs": [],
   "source": [
    "primals, tangent = jax.jvp(f, (muons,), (tan,)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e771eb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "h1.fill(tangent)\n",
    "h.fill(f(muons))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4d24b55",
   "metadata": {},
   "outputs": [],
   "source": [
    "h.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e7484ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "h1.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f57dc17e",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
